Alina Danci 
G00302444@gmit.ie
https://github.com/AliLigi/Python_Project

Sources for this Documentation & code:

http://codereview.stackexchange.com/questions/97274/print-permutations-in-an-iterative-way
https://en.wikipedia.org/wiki/Countdown_(game_show)
https://en.wikipedia.org/wiki/Heap%27s_algorithm
https://docs.python.org/2/library/itertools.html
https://pymotw.com/2/itertools/
http://stackoverflow.com/questions/7370801/measure-time-elapsed-in-python
http://www.endmemo.com/python/lowercase.php
http://www.oxfordlearnersdictionaries.com/wordlist/english/oxford3000/
https://github.com/dwyl/english-words

Documentation

USING PYTHON ITERTOOLS TO SAVE MEMORY:
Python provides a set of functions for working with iterable data sets
These are functions that will increase performance and avoid side effects with larger data sets.
Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each permutation. Therefore saving time and memory. More efficient.
Iterator functions are used for efficient looping, memory efficiency.

1. TIMING
-Reaserched to see the best way in displaying and timing the algorithm,, and this is the optimum solution i found by research.
-First line imports the time function we need 
-Second line starts the time
-Then  the third prints out to the console the running time of the program

	import time
	start_time = time.time()
	print("--- %s seconds ---" % (time.time() - start_time))
	
2. CONVERTING 
-converting the items in words all to lower case 
	words = [item.lower() for item in words]
	
3. RANDOM
-Importing Random 
-Randomly placing vowels and consonants in anagram
-Importing random, then set vowels and consonants
	import random
	anagram = []
	vowels = ['a','e','i','o','u']
	consonant = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z','w','y']
	
- Allowing 3 vowels, 4 constants and 2 mixed 

	for i in range (0,3):
    	anagram.append(random.choice(vowels))
	for i in range (0,4):
    	anagram.append(random.choice(consonant))
	for i in range (0,2):
    	anagram.append(random.choice(vowels + consonant))
		
	=======================================================
- The same as the above but written in a different way, allowing 3 for vowels, >3 <7 for consonants and the rest a mixture 

	def genRandomAlgo():
	anagram = []
	for i in range(0, 9):
		if i < 3:
			anagram += random.choice(vowels)
			if i > 3 & i < 7:
				anagram += random.choice(consonants)
				if i > 7:
					anagram += random.choice(vowels + consonants)
					
4. SHUFFLE
-Importing the shuffle function
-Then shuffles the anagram/letters that were chosen above  
	from random import shuffle
	shuffle(anagram)
	
5. JOINING 
-This prints the anagram on the screen but and does not allow for , to appear in the shuffled words
print (''.join(anagram))

6. ITERTOOLS
-This imports the the itertools function permutations which sets out the counter and then lists all the permutations
-itertools.permutations()—takes a collection of items and produces a sequence of tuples that rearranges all of the 
-items into all possible permutations (i.e., it shuffles them into all possible configurations)
-the reason i chose to go it this way is written at the start of this documentation 	

	from itertools import permutations
	j = 0
	permutation = []
	
7. LOOPING
-This looops 9 times because this is the max we will always have
-Finding all possible words-permutations of a given string
-Join permuted letters so no ',' '.' etc.

	for i in range (0,9):
    	permutation += [''.join(p) for p in permutations(anagram, j)]
    	j += 1
		
8. SORTING
-orders the words and give the largest word it finds
sortWord = sorted(res, key=len)
